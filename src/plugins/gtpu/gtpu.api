/*
 * Copyright (c) 2017 Intel and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option version = "1.0.0";

/** \brief Set or delete an GTPU tunnel
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - add address if non-zero, else delete
    @param is_ipv6 - src_address and dst_address is ipv6 or not
    @param src_address - GTPU tunnel's source address.
    @param dst_address - GTPU tunnel's destination address.
    @param mcast_sw_if_index - version, O-bit and C-bit (see nsh_packet.h)
    @param encap_vrf_id - fib identifier used for outgoing encapsulated packets
    @param decap_next_index - the index of the next node if success
    @param teid - Local Tunnel Endpoint Identifier
*/
define gtpu_add_del_tunnel
{
  u32 client_index;
  u32 context;
  u8 is_add;
  u8 is_ipv6;
  u8 src_address[16];
  u8 dst_address[16];
  u32 mcast_sw_if_index;
  u32 encap_vrf_id;
  u32 decap_next_index;
  u32 teid;
};

/** \brief reply for set or delete an GTPU tunnel
    @param context - sender context, to match reply w/ request
    @param retval - return code
    @param sw_if_index - software index of the interface
*/
define gtpu_add_del_tunnel_reply
{
  u32 context;
  i32 retval;
  u32 sw_if_index;
};

/** \brief Dump GTPU tunnel
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - software index of the interface
*/
define gtpu_tunnel_dump
{
  u32 client_index;
  u32 context;
  u32 sw_if_index;
};

/** \brief Want gtpu path management event info, register a client
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param enable_disable - 1 = enable stats, 0 = disable
    @param client_pid - pid of process requesting stats updates
	--- add by anhua
*/
autoreply define want_gtpu_events
{
  u32 client_index;
  u32 context;
  u32 enable_disable;
  u32 client_pid;
};


/** \brief dump gtpu error
    @param dst_address - GTPU tunnel's destination address.
	@param teid - Local Tunnel Endpoint Identifier
	@param code - Error code
	--- add by anhua
*/

define gtpu_error_indication_dump
{
  u32 client_index;
  u32 context;
  u32 dst_address[16];
  u32 teid;
  u32 code;
};

define gtpu_error_indication_details
{
  u32 context;
  u32 dst_address[16];
  u32 teid;
  u32 code;
};

/** \brief dump details of an GTPU tunnel
    @param context - sender context, to match reply w/ request
    @param sw_if_index - software index of the interface
    @param is_ipv6 - src_address and dst_address is ipv6 or not
    @param src_address - GTPU tunnel's source address.
    @param dst_address - GTPU tunnel's destination address.
    @param mcast_sw_if_index - version, O-bit and C-bit (see nsh_packet.h)
    @param encap_vrf_id - fib identifier used for outgoing encapsulated packets
    @param decap_next_index - the index of the next node if success
    @param teid - Local Tunnel Endpoint Identifier
*/
define gtpu_tunnel_details
{
  u32 context;
  u32 sw_if_index;
  u8 is_ipv6;
  u8 src_address[16];
  u8 dst_address[16];
  u32 mcast_sw_if_index;
  u32 encap_vrf_id;
  u32 decap_next_index;
  u32 teid;
};

/** \brief Interface set gtpu-bypass request
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param sw_if_index - interface used to reach neighbor
    @param is_ipv6 - if non-zero, enable ipv6-gtpu-bypass, else ipv4-gtpu-bypass
    @param enable - if non-zero enable, else disable
*/
define sw_interface_set_gtpu_bypass
{
  u32 client_index;
  u32 context;
  u32 sw_if_index;
  u8 is_ipv6;
  u8 enable;
};

/** \brief Interface set gtpu-bypass response
    @param context - sender context, to match reply w/ request
    @param retval - return code for the request
*/
define sw_interface_set_gtpu_bypass_reply
{
  u32 context;
  i32 retval;
};

/** \brief Set or delete an GTPU tunnel and route
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param is_add - add address if non-zero, else delete
    @param is_ipv6 - src_address and dst_address is ipv6 or not
    @param src_address - GTPU tunnel's source address.
    @param dst_address - GTPU tunnel's destination address.
    @param mcast_sw_if_index - version, O-bit and C-bit (see nsh_packet.h)
    @param encap_vrf_id - fib identifier used for outgoing encapsulated packets
    @param decap_next_index - the index of the next node if success
    @param teid - Local Tunnel Endpoint Identifier
    @param vrf_id - fib table /vrf associated with the route
    @param lookup_in_vrf - 
    @param classify_table_index - 
    @param is_drop - Drop the packet
    @param is_unreach - Drop the packet and rate limit send ICMP unreachable
    @param is_prohibit - Drop the packet and rate limit send ICMP prohibited
    @param is_ipv6 - 0 if an ip4 route, else ip6
    @param is_local - The route will result in packets sent to VPP IP stack
    @param is_udp_encap - The path describes a UDP-o-IP encapsulation.
    @param is_classify - 
    @param is_multipath - Set to 1 if this is a multipath route, else 0
    @param is_source_lookup - The the path is a deaggregate path (i.e. a lookup
    	   		      in another table) is the lookup on the packet's
			      source address or destination.
    @param next_hop_weight - Weight for Unequal cost multi-path
    @param next_hop_preference - Path that are up that have the best preference are
                                 are used for forwarding. lower value is better.
    @param next_hop_id - Used when the path resolves via an object that has a unique
                         identifier.
    @param dst_address_length - 
    @param dst_address[16] - 
    @param next_hop_address[16] - 
    @param next_hop_n_out_labels - the number of labels in the label stack
    @param next_hop_out_label_stack - the next-hop output label stack, outer most first
    @param next_hop_via_label - The next-hop is a resolved via a local label
*/
define gtpu_add_del_tunnel_v2
{
  u32 client_index;
  u32 context;
  u8 is_add;
  u8 is_ipv6;
  u8 src_address[16];
  u8 dst_address[16];
  u32 mcast_sw_if_index;
  u32 encap_vrf_id;
  u32 decap_next_index;
  u32 teid;
  u32 next_hop_sw_if_index;
  u32 table_id;
  u32 classify_table_index;
  u32 next_hop_table_id;
  u32 next_hop_id;
  u8 is_drop;
  u8 is_unreach;
  u8 is_prohibit;
  u8 is_local;
  u8 is_classify;
  u8 is_multipath;
  u8 is_resolve_host;
  u8 is_resolve_attached;
  u8 is_source_lookup;
  u8 is_udp_encap;
  u8 next_hop_weight;
  u8 next_hop_preference;
  u8 next_hop_proto;
  u8 dst_address_length;
  u8 dst_address_r[16];
  u8 next_hop_address[16];
  u8 next_hop_n_out_labels;
  u32 next_hop_via_label;
  u32 next_hop_out_label_stack[next_hop_n_out_labels];
};

/** \brief reply for set or delete an GTPU tunnel
    @param context - sender context, to match reply w/ request
    @param retval - return code
    @param sw_if_index - software index of the interface
*/
define gtpu_add_del_tunnel_v2_reply
{ 
  u32 context;
  i32 retval;
  u32 sw_if_index;
};

/*
 * Local Variables:
 * eval: (c-set-style "gnu")
 * End:
 */

